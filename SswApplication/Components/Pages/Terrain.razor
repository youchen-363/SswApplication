@page "/terrain"
@inject IJSRuntime JsRuntime
@using SswApplication.CSharp.Source
@using SswApplication.CSharp.Terrain
@using SswApplication.CSharp.Functions
@using System.Reflection

<h2>Relief</h2>
<h3>Configuration</h3>
<div class="form-group">
	<!-- X -->
	<div class="d-flex border marge">

		<!-- x_max -->
		<div class="marge">
			<label for="X_maxTern">x max (km)</label>
			<input type="number" id="X_maxTern" @bind="x_max" placeholder="x_max" @onfocusout="XMax" />
		</div>

		<!-- Delta x (x_step) -->
		<div class="marge">
			<label for="X_stepTern">Delta x (@config.X_step.Unit)</label>
			<input type="number" id="X_stepTern" @bind="@config.X_step.Value" placeholder="X_step" @onfocusout="XStep" />
		</div>

		<!-- n_x -->
		<div class="marge">
			<label for="N_xTern">N x (pts)</label>
			<input type="number" id="N_xTern" @bind="@config.N_x.Value" placeholder="N_x" @onfocusout="Nx" />
		</div>
	</div>
</div>
<div class="d-flex">
	<div class="tableScroll">
		<table class="table">
			<tr>
				<th></th>
				@for (int i = 1; i <= xVals.Count; i++)
				{
					if (i==xVals.Count)
					{
						<th>Stop</th>
					} 
					else if (i==1)
					{
						<th>Start</th>
					}
					else
					{
						<th>@i</th>
					}
				}
			</tr>
			<tr>
				<th class="p-3">x</th>
				@for (int i = 0; i < xVals.Count; i++)
				{
					int index = i;
					<td>
						<input type="number" class="form-control custom-input" @bind="xVals[index]" 
							@onclick="()=>RowChosen(index)" @onfocusout="()=>CheckXValue(index)" 
							disabled="@(index == 0 || index == xVals.Count - 1)"/>
					</td>
				
				}
			</tr>
			<tr>
				<th class="p-3">y</th>
				@for (int i = 0; i < zVals.Count; i++)
				{
					int index = i;
					<td>
						<input type="number" class="form-control custom-input" @bind="zVals[index]" @onclick="()=>RowChosen(index)"/>
					</td>
				}
			</tr>
			<tr>
				<th></th>
				@for (int i = 0; i < xVals.Count; i++)
				{
					btnAddStatus = i == colAdd && i!=xVals.Count-1 ? "d-block" : "d-none";
					btnDelStatus = i == colDel && i!=xVals.Count-1 && i!=0 ? "d-block" : "d-none";
					<td>
						<div>
							<button class="btn-primary @btnAddStatus m-1" @onclick="()=>{AddColumnAfter();RowUnchosen();}">Add</button>
							<button class="btn-primary @btnDelStatus m-1" @onclick="async () => { await DeleteColumn(); RowUnchosen(); }">Delete</button>
						</div>
					</td>
				}
			</tr>
		</table>
	</div>
</div>
<div>
	<!--
	<span class="p-2">Delete</span>
	<input type=number @bind="col" />
	<button class="btn-primary m-2" @onclick="DeleteColumn" OnClientClick="return confirm('Do you want to delete?');" disabled="@delete">-</button>
	-->
	<button class="btn-primary m-2" @onclick="SaveCSV">Save</button>
	@if (!string.IsNullOrEmpty(alertMsg))
	{
		<div class="alert alert-danger" role="alert">
			@alertMsg
		</div>
	} 
	else if (!string.IsNullOrEmpty(successMsg))
	{
		<div class="alert alert-success" role="alert">
			@successMsg
		</div>
	}
</div>
<div>
	<button class="btn-primary m-2" @onclick="DrawTestGraph">Draw Relief</button>
	<button class="btn-primary m-2" @onclick="DrawLineGraph">Run Relief</button>
</div>
@if (!string.IsNullOrEmpty(res))
{
	<div>
		<h5>Result</h5>
		<p class="border">@resultat</p>
	</div>
}
<div class="border" id="canvTest" style="width:100%; height:auto;">
	<canvas id="canvasTest"></canvas>
</div>

<div id="canvTerrain" style="width:100%; height:auto;">
	<canvas id="canvasTerrain"></canvas>
</div>

